import { CoinMetadata } from './interfaces';
import { CoinSymbolPosition } from './enums';
import { CoinID } from '@/models/coin/id';

export const coinsMetadata: Record<string, CoinMetadata> = {
  [CoinID.USD.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: '$',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.EUR.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: '.',
    decimalPlaces: 2,
    symbol: '€',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.CAD.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'CA$',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.BRL.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: '.',
    decimalPlaces: 2,
    symbol: 'R$',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.JPY.toString()]: {
    decimalSeparator: '',
    thousandSeparator: ',',
    decimalPlaces: 0,
    symbol: '¥',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.ARS.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: '.',
    decimalPlaces: 2,
    symbol: 'AR$',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.CNY.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: '¥',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.INR.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: '₹',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.IDR.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: '.',
    decimalPlaces: 0,
    symbol: 'Rp',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.KRW.toString()]: {
    decimalSeparator: '',
    thousandSeparator: ',',
    decimalPlaces: 0,
    symbol: '₩',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.CHF.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: `'`,
    decimalPlaces: 2,
    symbol: 'CHF',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.MXN.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'MX$',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.DKK.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: '.',
    decimalPlaces: 2,
    symbol: 'kr',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.NZD.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'NZ$',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.PHP.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: '₱',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.RUB.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: ' ',
    decimalPlaces: 2,
    symbol: '₽',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.PEN.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'S/',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.AUD.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'A$',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.PLN.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: ' ',
    decimalPlaces: 2,
    symbol: 'zł',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.VND.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: '.',
    decimalPlaces: 0,
    symbol: '₫',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.TRY.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: '.',
    decimalPlaces: 2,
    symbol: '₺',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.COP.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: '.',
    decimalPlaces: 2,
    symbol: 'COP',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.CLP.toString()]: {
    decimalSeparator: ',',
    thousandSeparator: '.',
    decimalPlaces: 0,
    symbol: 'CLP$',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.BTC.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 8,
    symbol: '₿',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.ETH.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 8,
    symbol: 'Ξ',
    symbolPosition: CoinSymbolPosition.Before,
  },
  [CoinID.USDT.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'USDT',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.FDUSD.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'FDUSD',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.USDC.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'USDC',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.BNB.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 8,
    symbol: 'BNB',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.SHIB.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 8,
    symbol: 'SHIB',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.DOGE.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 8,
    symbol: 'DOGE',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.XRP.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 6,
    symbol: 'XRP',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.POL.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 8,
    symbol: 'POL',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.TRX.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 6,
    symbol: 'TRX',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.SOL.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 6,
    symbol: 'SOL',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.AXS.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 6,
    symbol: 'AXS',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.TON.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 6,
    symbol: 'TON',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.ZAR.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'ZAR',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.NGN.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'NGN',
    symbolPosition: CoinSymbolPosition.After,
  },
  [CoinID.SGD.toString()]: {
    decimalSeparator: '.',
    thousandSeparator: ',',
    decimalPlaces: 2,
    symbol: 'SGD',
    symbolPosition: CoinSymbolPosition.After,
  },
};

export const coinsMetadataMapping: Map<string, CoinMetadata> = new Map(
  Object.entries(coinsMetadata).map(([key, value]) => [key, value]),
);
